buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
    classpath('org.springframework:springloaded:1.2.5.RELEASE')
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

// project configuration
def entitiesBasePackage = 'basearch.model'
project.sourceCompatibility = '1.8'
project.archivesBaseName = 'basearch'
project.version = '0.1.0'

sourceSets {
  main {
    resources {
      srcDir 'src/main/web'
    }
  }
}

repositories {
  mavenCentral()
  jcenter()
}

configurations {
  compile.exclude module: "spring-boot-starter-tomcat"

  weave
  metamodel
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("org.springframework.boot:spring-boot-starter-undertow")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-starter-security")
  compile("org.springframework.boot:spring-boot-starter-thymeleaf")
  compile("org.springframework.boot:spring-boot-starter-jdbc")

  compile 'javax.inject:javax.inject:1'
  compile 'org.springframework:spring-orm:4.3.2.RELEASE'
  compile 'org.eclipse.persistence:javax.persistence:2.1.0'
  compile 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.2'
  compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE'

  runtime("org.hsqldb:hsqldb")

  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile 'org.springframework.security:spring-security-test:4.1.1.RELEASE'

  weave 'org.eclipse.persistence:javax.persistence:2.1.0'
  weave 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.2'

  metamodel 'org.eclipse.persistence:javax.persistence:2.1.0'
  metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.2'
  metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.6.2'
  metamodel 'org.springframework.security:spring-security-core:4.1.1.RELEASE'
}

// local run marker task
task start(dependsOn: bootRun) {
  outputs.upToDateWhen { false }
}

compileJava {
  options.incremental = true
  destinationDir file("$buildDir/compiled-classes")
}

// jpa weaving
task copyNonPersistentClasses(type: Copy, dependsOn: compileJava) {
  from "$buildDir/compiled-classes"
  into sourceSets.main.output.classesDir
  exclude '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
  includeEmptyDirs = false
}
task copyPersistentClasses(type: Copy, dependsOn: compileJava) {
  from "$buildDir/compiled-classes"
  into "$buildDir/unwoven-persistent-classes"
  include '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
  includeEmptyDirs = false
}
task weaveJpaEntities(type: JavaExec) {
  main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
  classpath configurations.weave.incoming.files
  args '-persistenceinfo'
  args processResources.destinationDir.absolutePath
  args '-classpath'
  args configurations.compile.incoming.files.asPath
  args '-loglevel'
  args 'INFO'
  args copyPersistentClasses.destinationDir.absolutePath
  args sourceSets.main.output.classesDir.absolutePath

  inputs.files fileTree(copyPersistentClasses.destinationDir),fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
  outputs.dir sourceSets.main.output.classesDir
}
weaveJpaEntities.dependsOn copyPersistentClasses
classes.dependsOn weaveJpaEntities,copyNonPersistentClasses

// metamodel generation
task deleteMetamodel(type: Delete) {
  delete sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**/*_.java')})
}
task generateMetamodel(type: JavaCompile, dependsOn: deleteMetamodel) {
  classpath = configurations.metamodel.incoming.files
  source sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**')})
  destinationDir = sourceSets.main.java.getSrcDirs().iterator().next()
  options.compilerArgs << '-proc:only'
  options.compilerArgs << '-Aeclipselink.persistencexml=' + "$projectDir/src/main/resources/META-INF/persistence.xml"
}





// Gradle wrapper task
// Only used when in need to reinstall the wrapper
task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}