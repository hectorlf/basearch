apply plugin: 'war'
apply plugin: 'arquillian'


// project defs

def entitiesBasePackage = 'basearch.model'


configurations {
   weave
   metamodel
}

dependencies {
   // some common dependencies are configured in the root build.gradle
    
   providedCompile("commons-logging:commons-logging:")
   providedCompile("javax.servlet:javax.servlet-api:")

   compile("javax.inject:javax.inject:")
   compile("org.springframework:spring-webmvc:")
   compile("org.springframework:spring-tx:")
   compile("org.springframework:spring-orm:")
   compile("org.springframework.security:spring-security-web:")
   compile("org.springframework.security:spring-security-config:")
   compile("org.thymeleaf:thymeleaf-spring4:")
   compile("org.eclipse.persistence:org.eclipse.persistence.jpa:")
    
   runtime("org.slf4j:jcl-over-slf4j:")
   runtime("org.apache.bval:bval-jsr303:")
   runtime("org.aspectj:aspectjweaver:")

   testCompile("junit:junit:")
   testCompile("org.springframework:spring-test:")
   testCompile("org.hsqldb:hsqldb:")
   testCompile("org.mockito:mockito-core:")

   weave 'org.eclipse.persistence:javax.persistence:'
   weave 'org.eclipse.persistence:org.eclipse.persistence.jpa:'
   
   metamodel 'org.eclipse.persistence:javax.persistence:'
   metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa:'
   metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:'
   metamodel 'org.springframework.security:spring-security-core:'
}

compileJava {
	destinationDir = new File(buildDir, 'unwoven-classes')
}

war {
   from 'WebContent'
   webInf { from 'WEB-INF', new File(buildDir, 'tmp-web-inf') } // adds a file-set to the WEB-INF dir.
   metaInf { from 'META-INF' } // adds a file-set to the META-INF dir.
}



// environment dependent resources

task processDevelopmentResources(type: Copy, dependsOn: processResources) {
   from 'env/dev/resources'
   into processResources.destinationDir
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processDevelopmentWebInf(type: Copy, dependsOn: processResources) {
   from 'env/dev/web-inf'
   into new File(buildDir, 'tmp-web-inf')
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processReleaseResources(type: Copy, dependsOn: processResources) {
   from 'env/prod/resources'
   into processResources.destinationDir
   onlyIf { gradle.taskGraph.hasTask(release) }
}


// jpa weaving

task weaveJpaEntities(type: JavaExec) {
   main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
   classpath configurations.weave.incoming.files
   args '-persistenceinfo'
   args processResources.destinationDir.absolutePath
   args '-classpath'
   args configurations.compile.incoming.files.asPath
   args '-loglevel'
   args 'INFO'
   args compileJava.destinationDir.absolutePath
   args sourceSets.main.output.classesDir.absolutePath
   
   inputs.files fileTree(compileJava.destinationDir),fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
   outputs.dir sourceSets.main.output.classesDir
}
weaveJpaEntities.dependsOn compileJava,processResources,processDevelopmentResources,processDevelopmentWebInf,processReleaseResources
classes.dependsOn weaveJpaEntities



// local jetty run

arquillian {
   debug = true

   containers {
      jetty {
         version = '8'
         type = 'embedded'
         config = ['bindHttpPort': 8080, 'bindAddress': '127.0.0.1', 'jettyPlus': true]

         dependencies {
            adapter 'org.jboss.arquillian.container:arquillian-jetty-embedded-7:1.0.0.CR2'
            container 'org.eclipse.jetty:jetty-webapp:8.1.11.v20130520'
            container group: 'org.eclipse.jetty', name: 'jetty-plus', version: '8.1.11.v20130520'
         }
      }
   }
}

run.dependsOn "arquillianRunJetty"





/**********************
 * metamodel generation
 **********************/

task deleteMetamodel(type: Delete) {
   delete sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**/*_.java')})
}

task generateMetamodel(type: JavaCompile, dependsOn: deleteMetamodel) {
   classpath = configurations.metamodel.incoming.files
   source sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**')})
   destinationDir = sourceSets.main.java.getSrcDirs().iterator().next()
   options.compilerArgs << '-proc:only'
   options.compilerArgs << '-Aeclipselink.persistencexml=' + projectDir.absolutePath + '/env/dev/resources/META-INF/persistence.xml'
}
